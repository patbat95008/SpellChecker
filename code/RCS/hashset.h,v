head	1.3;
access;
symbols;
locks;
comment	@ * @;


1.3
date	2014.03.06.03.24.07;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.03.05.04.49.14;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.11.17.02.05.22;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: hashset.h,v 1.2 2013-03-04 20:49:14-08 - - $

#ifndef __HASHSET_H__
#define __HASHSET_H__

#include <stdbool.h>

typedef struct hashset hashset;

//
// Create a new hashset with a default number of elements.
//
hashset *new_hashset (void);

//
// Frees the hashset, and the words it points at.
//
void free_hashset (hashset*);

//
// Inserts a new string into the hashset.
//
void put_hashset (hashset*, const char*);

//
// Looks up the string in the hashset and returns true if found,
// false if not found.
//
bool has_hashset (hashset*, const char*);

#endif

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: hashset.h,v 1.1 2012-11-16 18:05:22-08 - - $
d18 1
a18 1
void free_hashset (hashset *);
d23 1
a23 1
void put_hashset (hashset *, char*);
d29 1
a29 1
bool has_hashset (hashset *, char*);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: hashset.h,v 1.2 2012-02-21 20:37:06-08 - - $
d8 1
a8 1
typedef struct hashset *hashset_ref;
d13 1
a13 1
hashset_ref new_hashset (void);
d18 1
a18 1
void free_hashset (hashset_ref);
d23 1
a23 1
void put_hashset (hashset_ref, char*);
d29 1
a29 1
bool has_hashset (hashset_ref, char*);
@
